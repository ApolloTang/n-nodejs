Three way to debug;
    1. $ node-dev script.js      // using npm module
    2. $ node debug script.js    // build in debuger
    3. $ node-debug script.js    // chrome inspector

==========================================
::: Using development tool node-dev:

    Installing development package:

        $ sudo npm install node-dev -g

    now instead of typing, at command promp:

        $ node script.js

    you type:

        $ node-dev script.js

    node-dev will watch script.js and re-execute the script whenever the
    content of the file has changed.

    To exist node-dev:

        ^C

------------------------------------------------------

::: debugging

    $ node debug script.js
    debug> run    // will exec script.js and pause at "debugger;"

    available commend:

        >list                   //see where are you at source code
        >print <variable name>  // print value hold in variable
        >next                   // step to next function
        >scripts                // list all scripts involve
        >step                   // step into a function


        Stepping
            cont, c - Continue execution
            next, n - Step next
            step, s - Step in
            out, o - Step out
            pause - Pause running code (like pause button in Developer Tools)

        Breakpoints#
            setBreakpoint(), sb() - Set breakpoint on current line
            setBreakpoint(line), sb(line) - Set breakpoint on specific line
            setBreakpoint('fn()'), sb(...) - Set breakpoint on a first statement in functions body
            setBreakpoint('script.js', 1), sb(...) - Set breakpoint on first line of script.js
            clearBreakpoint, cb(...) - Clear breakpoint

        Info#

            backtrace, bt - Print backtrace of current execution frame
            list(5) - List scripts source code with 5 line context (5 lines before and after)
            watch(expr) - Add expression to watch list
            unwatch(expr) - Remove expression from watch list
            watchers - List all watchers and their values (automatically listed on each breakpoint)
            repl - Open debugger's repl for evaluation in debugging script's context

        Execution control#

            run - Run script (automatically runs on debugger's start)
            restart - Restart script
            kill - Kill script
            Various#
            scripts - List all loaded scripts
            version - Display v8's version

    more info:
        https://nodejs.org/api/debugger.html

------------------------------------------------------


::: node-inspector

    $ node -v
    v0.10.38

    $ npm -g list | grep node
    ├─┬ node-inspector@0.12.2

    as the above version, you just need to type:

        $ node-debug app.js

    chrome  will open up with port ready for you!
    so you can ignore bellow:


    ------------------------------------------------------

        https://github.com/node-inspector/node-inspector

            $npm install -g node-inspector

        Run your application in debug mode:

            $node-debug your/node/program.js

            or attach to a running process:
                $kill -s USR1 <your node process id>)

        In another terminal window run node-inspector:

            $node-inspector

        Open http://127.0.0.1:8080/debug?port=5858
        or debug remotely by replacing 127.0.0.1 with your host; make sure port 8080 is open).

        or

        node-inspector & node --debug-brk scriptFileName.js

        [!!!]

------------------------------------------------------

::: Runing test with nodemon

    nodemon --exec "npm test"


------------------------------------------------------

::: Runing inspector wiht nodemon

    http://stackoverflow.com/questions/25798050/running-node-inspector-alongside-nodemon
